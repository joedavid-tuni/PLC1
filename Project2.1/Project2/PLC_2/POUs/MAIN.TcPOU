<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.6">
  <POU Name="MAIN" Id="{fd86db8c-f83c-4727-b3c3-e8fb7ac62f04}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR

PALLETS : ARRAY [1..50] OF PALLET;					// array that will contain the pallet's information. The number of pallets is limitted by 50 but the code work for as many pallets as we want.
INDEX_PALLET : ARRAY [1..50] OF INT := [50(50)];	// array that will contain the index of each pallet in the PALLETS array
NUMBER_PALLETS : ARRAY [1..9] OF INT;				// number of pallets in every possible position of the system

// Inputs
START : BOOL;
P1 : BOOL;
P2 : BOOL;
P3 : BOOL;
L1 : BOOL;
L2 : BOOL;
L3 : BOOL;
PALLET_IN : BOOL;

// Outputs
BA1 : BOOL;
BA2 : BOOL;
BA3 : BOOL;
S1 : BOOL:=TRUE;
S2 : BOOL:=TRUE;
S3 : BOOL:=TRUE;


MOTOR : BOOL;			// Motor signal
COUNTER_IN : INT:=0;	// number of pallets that have been introduced to the system
COUNTER_OUT : INT:=0;	// number of pallets that have been processed by all of th workstation

// Auxiliary variables
STATE_OUT : INT:=0;			
f : INT;
PROCESS_COUNTER_OUT : TON;	// timer 5s
COUNTER_WS2 : TON;			// timer 5s
COUNTER_WS3 : TON;			// timer 5s
COUNTER_PICK2 : TON;		// timer 2s for picking up pallets from conveyor to workstation 2 and timer for letting pallet pass through the stopper 2
COUNTER_PICK3 : TON;		// timer 2s. The same as COUNTER_PICK2 but for workstation 3
COUNTER_PICK1 : TON;		// timer 2s. The same as COUNTER_PICK2 but for workstation 1
POSITION2 : BOOL;			// variable that will indicate that a pallet is in front of workstation 2
POSITION3 : BOOL;			// variable that will indicate that a pallet is in front of workstation 3
POSITION1 : BOOL;			// variable that will indicate that a pallet is in front of workstation 1
INDEX : INT;				// index of the last pallet inside the system

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// External states 0, 1, 2 and 3
CASE STATE_OUT OF
	0:
	// state that means that the system is not working
	IF START=TRUE THEN
		STATE_OUT:=1;
		MOTOR:= 1;
	END_IF
	1:
	// system is runing. If we insert a pallet, this state is going to insert the pallet in the system
	IF PALLET_IN=TRUE AND NOT L1 THEN
		STATE_OUT:=2;		
		COUNTER_IN:=COUNTER_IN+1;		
		IF (COUNTER_IN-COUNTER_OUT)>1 THEN
			PALLETS[INDEX].NEXT_PALLET := (COUNTER_IN-COUNTER_OUT);
			PALLETS[(COUNTER_IN-COUNTER_OUT)].NEXT_PALLET :=0;
			PALLETS[(COUNTER_IN-COUNTER_OUT)].PREVIOUS_PALLET :=INDEX;			
		END_IF
		L1:=TRUE;
		PALLET_IN:=FALSE;
		PROCESS_COUNTER_OUT(IN:=FALSE, PT :=T#5S);
	END_IF
	IF PALLET_IN AND L1 THEN
		STATE_OUT:=3;
	END_IF
	
	2:
	// when a pallet is inserted, she is inserted in workstation 1 and this workstation start by processing the pallet. This takes 5 seconds
	PROCESS_COUNTER_OUT(IN:=TRUE, PT :=T#5S);
	IF PROCESS_COUNTER_OUT.Q THEN
		STATE_OUT:=3;
		L1:=FALSE;
		INDEX_PALLET[COUNTER_IN]:=COUNTER_IN-COUNTER_OUT;
		NUMBER_PALLETS[1]:=NUMBER_PALLETS[1]+1;
		PALLETS[(COUNTER_IN-COUNTER_OUT)].POSITION :=0;
		PALLETS[(COUNTER_IN-COUNTER_OUT)].EX :=TRUE;
		PALLETS[(COUNTER_IN-COUNTER_OUT)].NUMBER :=COUNTER_IN;
	END_IF
	
	3:
	// in this state, the system will pass through all of the pallets that are in the system. He will see where are they and, depending on the inputs, he will do something to the pallets.
	IF PALLET_IN THEN
		// if PALLETS_IN is pressed, then we have to jump to external state 1 to insert the pallet.
		STATE_OUT:=1;	
	END_IF	
	
	// these nex lines of code exist to find the pallet that is in the front of all of them
	IF PALLETS[1].PREVIOUS_PALLET>0 THEN
		f:=1;
		WHILE PALLETS[f].PREVIOUS_PALLET>0 DO
			f:=PALLETS[f].PREVIOUS_PALLET;
		END_WHILE
	ELSE
		f:=1;
	END_IF	
	
	// WHILE cycle, where the system will pass through all of the pallets in the system
	WHILE f>0 DO
		INDEX:=f;
		// Internal states
		CASE PALLETS[f].POSITION OF
			0:
			// if the pallets is in state (position) 0, she will have to wait for P2 to be pressed to jump to the next position.
			IF P2 AND NOT POSITION2 THEN
				NUMBER_PALLETS[1]:=NUMBER_PALLETS[1]-1;
				NUMBER_PALLETS[2]:=NUMBER_PALLETS[2]+1;
				PALLETS[f].POSITION:=1;
				POSITION2:=TRUE;
				COUNTER_PICK2(IN:=FALSE, PT :=T#2S);
			END_IF
		
			1:
			// if the pallet is in position 1 (in front of workstation 2) we will have to check if the workstation is free and if the pallet does not have the service from this workstation
			IF NOT L2 AND NOT PALLETS[f].WS2 AND S2 THEN
				// if yes, then the workstation has to pick up the pallet. This takes 2 seconds
				BA2:=TRUE;
				COUNTER_PICK2(IN:=TRUE, PT :=T#2S);
				IF COUNTER_PICK2.Q THEN
					NUMBER_PALLETS[2]:=NUMBER_PALLETS[2]-1;
					NUMBER_PALLETS[8]:=NUMBER_PALLETS[8]+1;
					PALLETS[f].POSITION:=7;
					POSITION2:=FALSE;
					P2:=FALSE;
					BA2:=FALSE;
					L2:=TRUE;
					COUNTER_WS2(IN:=FALSE, PT :=T#5S);
				END_IF				
			ELSE
				// if no, then the stopper 2 should go down, letting the pallet pass. This takes also 2 seconds
				IF L2 OR PALLETS[f].WS2 OR NOT S2 THEN
					S2:=FALSE;
					COUNTER_PICK2(IN:=TRUE, PT :=T#2S);
					IF COUNTER_PICK2.Q THEN
						NUMBER_PALLETS[2]:=NUMBER_PALLETS[2]-1;
						NUMBER_PALLETS[3]:=NUMBER_PALLETS[3]+1;
						PALLETS[f].POSITION:=2;
						S2:=TRUE;
						P2:=FALSE;
						POSITION2:=FALSE;
						// when this happens, this pallet passes in front of the pallet that is being processed by the workstation 2
						// these next lines exist to make that change in the order of the pallets
						IF L2 THEN
							PALLETS[PALLETS[f].PREVIOUS_PALLET].NEXT_PALLET:=PALLETS[f].NEXT_PALLET;
							PALLETS[f].NEXT_PALLET:=PALLETS[f].PREVIOUS_PALLET;
							
							PALLETS[f].PREVIOUS_PALLET:= PALLETS[PALLETS[f].PREVIOUS_PALLET].PREVIOUS_PALLET;
							PALLETS[PALLETS[f].NEXT_PALLET].PREVIOUS_PALLET:=f;
							
							IF PALLETS[f].PREVIOUS_PALLET>0 THEN
								PALLETS[PALLETS[f].PREVIOUS_PALLET].NEXT_PALLET:=f;
							END_IF
							
							IF PALLETS[PALLETS[f].NEXT_PALLET].NEXT_PALLET>0 THEN
								PALLETS[PALLETS[PALLETS[f].NEXT_PALLET].NEXT_PALLET].PREVIOUS_PALLET:=PALLETS[f].NEXT_PALLET;
							END_IF
							
						END_IF
						
					END_IF
				END_IF
			END_IF
			
			2:
			// if the pallet is in position 2, she has to wait for P3 to be pressed to jump to position 3
			IF P3 AND NOT POSITION3 THEN
				NUMBER_PALLETS[3]:=NUMBER_PALLETS[3]-1;
				NUMBER_PALLETS[4]:=NUMBER_PALLETS[4]+1;
				PALLETS[f].POSITION:=3;
				POSITION3:=TRUE;
				COUNTER_PICK3(IN:=FALSE, PT :=T#2S);
			END_IF
			
			3:
			//in this position we have to do the samething that we did in position 1
			IF NOT L3 AND NOT PALLETS[f].WS3 AND S3 THEN
				// if the pallet does not have the service from workstation 3 and this workstation is free, then the pallet goes inside the workstation. This takes 2 seconds
				BA3:=TRUE;
				COUNTER_PICK3(IN:=TRUE, PT :=T#2S);
				IF COUNTER_PICK3.Q THEN
					NUMBER_PALLETS[4]:=NUMBER_PALLETS[4]-1;
					NUMBER_PALLETS[9]:=NUMBER_PALLETS[9]+1;
					PALLETS[f].POSITION:=8;
					BA3:=FALSE;
					P3:=FALSE;
					POSITION3:=FALSE;
					L3:=TRUE;
					COUNTER_WS3(IN:=FALSE, PT :=T#5S);
				END_IF				
			ELSE
				IF L3 OR PALLETS[f].WS3 OR NOT S3 THEN
					// if the workstation is working or the pallet alreafy has this servide, then the stopper 3 goes down and the pallet passes to position 4
					S3:=FALSE;
					COUNTER_PICK3(IN:=TRUE, PT :=T#2S);
					IF COUNTER_PICK3.Q THEN
						NUMBER_PALLETS[4]:=NUMBER_PALLETS[4]-1;
						NUMBER_PALLETS[5]:=NUMBER_PALLETS[5]+1;
						PALLETS[f].POSITION:=4;
						S3:=TRUE;
						P3:=FALSE;
						POSITION3:=FALSE;
						// when this happens, this pallet passes in front of the pallet that is being processed by the workstation 3
						// these next lines exist to make that change in the order of the pallets
						IF L3 THEN
							PALLETS[PALLETS[f].PREVIOUS_PALLET].NEXT_PALLET:=PALLETS[f].NEXT_PALLET;
							PALLETS[f].NEXT_PALLET:=PALLETS[f].PREVIOUS_PALLET;
							
							PALLETS[f].PREVIOUS_PALLET:= PALLETS[PALLETS[f].PREVIOUS_PALLET].PREVIOUS_PALLET;
							PALLETS[PALLETS[f].NEXT_PALLET].PREVIOUS_PALLET:=f;
							
							IF PALLETS[f].PREVIOUS_PALLET>0 THEN
								PALLETS[PALLETS[f].PREVIOUS_PALLET].NEXT_PALLET:=f;
							END_IF
							
							IF PALLETS[PALLETS[f].NEXT_PALLET].NEXT_PALLET>0 THEN
								PALLETS[PALLETS[PALLETS[f].NEXT_PALLET].NEXT_PALLET].PREVIOUS_PALLET:=PALLETS[f].NEXT_PALLET;
							END_IF
							
						END_IF
						
					END_IF
				END_IF
			END_IF
			
			4:
			// in this position, the pallet has to wait for P1 to be pressed to jump to position 5
			IF P1 AND NOT POSITION1 THEN
				NUMBER_PALLETS[5]:=NUMBER_PALLETS[5]-1;
				NUMBER_PALLETS[6]:=NUMBER_PALLETS[6]+1;
				PALLETS[f].POSITION:=5;
				POSITION1:=TRUE;
				COUNTER_PICK1(IN:=FALSE, PT :=T#2S);
			END_IF
			
			5:
			// if the pallet has the service from workstation 2 and 3 and the workstation 1 is free, she is reafy to leave the system. The workstation pickes up the pallet. This takes 2 seconds
			IF NOT L1 AND PALLETS[f].WS3 AND PALLETS[f].WS2 THEN
				BA1:=TRUE;
				COUNTER_PICK1(IN:=TRUE, PT :=T#2S);
				IF COUNTER_PICK1.Q THEN
					NUMBER_PALLETS[6]:=NUMBER_PALLETS[6]-1;
					PALLETS[f].POSITION:=9;
					BA1:=FALSE;
					POSITION1:=FALSE;
					P1:=FALSE;
				END_IF				
			ELSE
				IF L1 OR NOT PALLETS[f].WS3 OR NOT PALLETS[f].WS2 THEN
					// if the pallet does not have the service from workstation 2 or 3 or the workstation is working, then the stopper 1 goes down and the pallet pass to position 0 again.
					S1:=FALSE;
					COUNTER_PICK1(IN:=TRUE, PT :=T#2S);
					IF COUNTER_PICK1.Q THEN
						NUMBER_PALLETS[6]:=NUMBER_PALLETS[6]-1;
						NUMBER_PALLETS[1]:=NUMBER_PALLETS[1]+1;
						PALLETS[f].POSITION:=0;
						S1:=TRUE;
						P1:=FALSE;
						POSITION1:=FALSE;
						// when this happens, this pallet passes in front of the pallet that is being processed by the workstation 1
						// these next lines exist to make that change in the order of the pallets
						IF L1 THEN
							PALLETS[PALLETS[f].PREVIOUS_PALLET].NEXT_PALLET:=PALLETS[f].NEXT_PALLET;
							PALLETS[f].NEXT_PALLET:=PALLETS[f].PREVIOUS_PALLET;
							
							PALLETS[f].PREVIOUS_PALLET:= PALLETS[PALLETS[f].PREVIOUS_PALLET].PREVIOUS_PALLET;
							PALLETS[PALLETS[f].NEXT_PALLET].PREVIOUS_PALLET:=f;
							
							IF PALLETS[f].PREVIOUS_PALLET>0 THEN
								PALLETS[PALLETS[f].PREVIOUS_PALLET].NEXT_PALLET:=f;
							END_IF
							
							IF PALLETS[PALLETS[f].NEXT_PALLET].NEXT_PALLET>0 THEN
								PALLETS[PALLETS[PALLETS[f].NEXT_PALLET].NEXT_PALLET].PREVIOUS_PALLET:=PALLETS[f].NEXT_PALLET;
							END_IF
							
						END_IF
						
					END_IF
				END_IF
			END_IF
			
			7:
			// is the pallet is in position 7, it means that he is being processed by workstation 2. This takes 5 seconds and then the pallet goes to position 2
			COUNTER_WS2(IN:=TRUE, PT :=T#5S);
			IF COUNTER_WS2.Q THEN
				PALLETS[f].WS2:=TRUE;
				L2:=FALSE;
				PALLETS[f].POSITION:=2;
				NUMBER_PALLETS[8]:=NUMBER_PALLETS[8]-1;
				NUMBER_PALLETS[3]:=NUMBER_PALLETS[3]+1;			
				
			END_IF
			
			8:
			// is the pallet is in position 8, it means that he is being processed by workstation 3. This takes 5 seconds and then the pallet goes to position 4
			COUNTER_WS3(IN:=TRUE, PT :=T#5S);
			IF COUNTER_WS3.Q THEN
				NUMBER_PALLETS[9]:=NUMBER_PALLETS[9]-1;
				NUMBER_PALLETS[5]:=NUMBER_PALLETS[5]+1;
				PALLETS[f].POSITION:=4;
				PALLETS[f].WS3:=TRUE;
				L3:=FALSE;
			END_IF
			
			9:
			// if the pallet reach position 9, it means that she has to leave the system. This state has to find where is the pallet in the PALLETS array and then chenge the position of this pallet and the last one. This is going to preserve the free space in the PALLETS array.
			INDEX_PALLET[PALLETS[f].NUMBER]:=50;
			IF f<(COUNTER_IN-COUNTER_OUT) THEN
				INDEX_PALLET[PALLETS[COUNTER_IN-COUNTER_OUT].NUMBER]:=f;
			END_IF
						
			IF (COUNTER_IN-COUNTER_OUT) =1 THEN
				PALLETS[f].PREVIOUS_PALLET:=0;
				PALLETS[f].NEXT_PALLET:=0;
				PALLETS[f].POSITION:=-1;
				PALLETS[f].WS2:=FALSE;
				PALLETS[f].WS3:=FALSE;
				PALLETS[f].EX:=FALSE;
				PALLETS[f].NUMBER:=0;
			ELSE
				IF f=1 THEN
					IF PALLETS[f].NEXT_PALLET>0 THEN
						PALLETS[PALLETS[f].NEXT_PALLET].PREVIOUS_PALLET:=0;
					END_IF										
					IF COUNTER_IN-COUNTER_OUT>2 THEN	
						PALLETS[f].PREVIOUS_PALLET:=COUNTER_IN-COUNTER_OUT-1;					
						PALLETS[COUNTER_IN-COUNTER_OUT-1].NEXT_PALLET:=1;
					ELSE
						PALLETS[f].PREVIOUS_PALLET:=0;
					END_IF
					PALLETS[f].NEXT_PALLET:=0;
					
					PALLETS[f].POSITION:=PALLETS[(COUNTER_IN-COUNTER_OUT)].POSITION;
					PALLETS[f].WS2:=PALLETS[(COUNTER_IN-COUNTER_OUT)].WS2;
					PALLETS[f].WS3:=PALLETS[(COUNTER_IN-COUNTER_OUT)].WS3;
					PALLETS[f].EX:=PALLETS[(COUNTER_IN-COUNTER_OUT)].EX;
					PALLETS[f].NUMBER:=PALLETS[(COUNTER_IN-COUNTER_OUT)].NUMBER;
					
				END_IF
				IF f<(COUNTER_IN-COUNTER_OUT) AND f>1 THEN
					IF PALLETS[f].PREVIOUS_PALLET>0 THEN
						PALLETS[(PALLETS[f].PREVIOUS_PALLET)].NEXT_PALLET:=PALLETS[f].NEXT_PALLET;
					
						IF PALLETS[f].NEXT_PALLET>0 THEN
							PALLETS[(PALLETS[f].NEXT_PALLET)].PREVIOUS_PALLET:=PALLETS[f].PREVIOUS_PALLET;
						END_IF
						PALLETS[PALLETS[COUNTER_IN-COUNTER_OUT].PREVIOUS_PALLET].NEXT_PALLET:=f;
						PALLETS[f].PREVIOUS_PALLET:=PALLETS[COUNTER_IN-COUNTER_OUT].PREVIOUS_PALLET;
						PALLETS[f].NEXT_PALLET:=PALLETS[COUNTER_IN-COUNTER_OUT].NEXT_PALLET;
					ELSE
						PALLETS[(PALLETS[f].NEXT_PALLET)].PREVIOUS_PALLET:=0;
						PALLETS[f].PREVIOUS_PALLET:=PALLETS[COUNTER_IN-COUNTER_OUT].PREVIOUS_PALLET;
						PALLETS[f].NEXT_PALLET:=PALLETS[COUNTER_IN-COUNTER_OUT].NEXT_PALLET;
						PALLETS[PALLETS[COUNTER_IN-COUNTER_OUT].PREVIOUS_PALLET].NEXT_PALLET:=f;
					END_IF					
					
					PALLETS[f].POSITION:=PALLETS[(COUNTER_IN-COUNTER_OUT)].POSITION;
					PALLETS[f].WS2:=PALLETS[(COUNTER_IN-COUNTER_OUT)].WS2;
					PALLETS[f].WS3:=PALLETS[(COUNTER_IN-COUNTER_OUT)].WS3;
					PALLETS[f].EX:=PALLETS[(COUNTER_IN-COUNTER_OUT)].EX;
					PALLETS[f].NUMBER:=PALLETS[(COUNTER_IN-COUNTER_OUT)].NUMBER;							
				END_IF
				IF f=COUNTER_IN-COUNTER_OUT THEN
					PALLETS[COUNTER_IN-COUNTER_OUT-1].NEXT_PALLET:=0;
					IF PALLETS[f].PREVIOUS_PALLET>0 THEN
						PALLETS[PALLETS[f].PREVIOUS_PALLET].NEXT_PALLET:=COUNTER_IN-COUNTER_OUT-1;
					END_IF					
					PALLETS[COUNTER_IN-COUNTER_OUT-1].PREVIOUS_PALLET:= PALLETS[f].PREVIOUS_PALLET;
				END_IF
				PALLETS[(COUNTER_IN-COUNTER_OUT)].POSITION:=-1;
				PALLETS[(COUNTER_IN-COUNTER_OUT)].WS2:=FALSE;
				PALLETS[(COUNTER_IN-COUNTER_OUT)].WS3:=FALSE;
				PALLETS[(COUNTER_IN-COUNTER_OUT)].EX:=FALSE;
				PALLETS[(COUNTER_IN-COUNTER_OUT)].NEXT_PALLET:=0;
				PALLETS[(COUNTER_IN-COUNTER_OUT)].PREVIOUS_PALLET:=0;
				PALLETS[(COUNTER_IN-COUNTER_OUT)].NUMBER:=0;
			END_IF
			COUNTER_OUT:=COUNTER_OUT+1;
			
		END_CASE
		
		f:=PALLETS[f].NEXT_PALLET;
		
	END_WHILE
END_CASE]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>